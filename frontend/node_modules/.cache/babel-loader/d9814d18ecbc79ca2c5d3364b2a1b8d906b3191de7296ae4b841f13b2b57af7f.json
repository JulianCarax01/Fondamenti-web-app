{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ross2\\\\Desktop\\\\Fondamenti-web-app\\\\frontend\\\\src\\\\pages\\\\ChatsPageFriends.jsx\",\n  _s = $RefreshSig$();\n/*import React, {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport ChatButton from \"../components/ChatButton\";\r\nimport Chat from \"../components/Chat\";\r\n\r\nexport default function ChatsPageFriends() {\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState(false)\r\n    const [chats, setChats] = useState([])\r\n    const [showChatRoom, setShowChatRoom] = useState(false)\r\n    const [otherUser, setOtherUser]=useState(``)\r\n    const [rightChat, setRightChat] = useState({})\r\n    const loggedUser = JSON.parse(localStorage.getItem(\"user\"))\r\n    console.log(loggedUser)\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(`http://localhost:3000/api/users/showChat/` + `${loggedUser._id}`)\r\n            .then((res) => {\r\n                if (res.status === 200) {\r\n                    return res.data\r\n                } else {\r\n                    throw new Error(\"Errore di comunicazione col server nell'ottenimento delle chat\")\r\n                }\r\n            })\r\n            .then((dati) => {\r\n                setLoading(false);\r\n                setChats(dati)\r\n            })\r\n            .catch((e) => {\r\n                setError(true);\r\n                setLoading(false);\r\n                console.log(e)\r\n            })\r\n    }, [])\r\n\r\n    \r\n    console.log(loggedUser)\r\n    console.log(loggedUser.friends.length)\r\n\r\n    //filtro le chat, controllo se l'utente Ã¨ presente nella lista di amici con some e prendo il suo id\r\n    const friendChats = chats.filter((chat) => {\r\n        const friendID = chat.utente1 === loggedUser._id ? chat.utente2 : chat.utente1\r\n        const isFriend = loggedUser.friends.some(\r\n            (friend) => friend._id == friendID)\r\n        return isFriend\r\n      })\r\n\r\n      console.log(friendChats.length)\r\n      console.log(friendChats)\r\n     \r\n\r\n\r\n    return (<>\r\n        <div>\r\n        {!friendChats.length ? \r\n        ( <p>Non hai ancora chat con gli amici</p> ) : ( <p>Visualizzazione solo delle chat con gli amici</p> )}\r\n\r\n            {loading ? <p>Caricamento in corso...</p> : error ? <p>Errore!!!Impossibile visualizzare le chat</p> : (\r\n                <div className=\"sidebar\">\r\n                    {friendChats.map((chat) => {\r\n                        let user;\r\n                        {\r\n                            loggedUser._id === chat.utente1 ? user = chat.utente2 : user = chat.utente1\r\n                        }\r\n                        return <ChatButton key={chat._id} user={user} showChatRoom={showChatRoom}\r\n                                           setShowChatRoom={setShowChatRoom} chat={chat}\r\n                                           setRightChat={setRightChat}\r\n                                           setOtherUser={setOtherUser}\r\n\r\n                        ></ChatButton>\r\n                    })}\r\n                </div>)}\r\n        </div>\r\n        <div className=\"main-content\">\r\n            {showChatRoom && (<Chat rightChat={rightChat} otherUser={otherUser} loggedUser={loggedUser}></Chat>)}\r\n        </div>\r\n        <p> Per ritornare alla <a href=\"http://localhost:3001/homepage\"> Homepage </a> </p> \r\n\r\n    </>)\r\n\r\n}\r\n*/\n/*import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Chat from \"../components/Chat\";\r\nimport '../style/style_viewfriends.css'\r\n\r\n\r\nexport default function ChatsPageFriends() {\r\n    const [friendList, setFriendList] = useState([])\r\n    const [selectedFriend, setSelectedFriend] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const user = JSON.parse(localStorage.getItem('user'))\r\n        const me_user = user._id\r\n\r\n        axios.post(\"http://localhost:3000/api/users/viewFriends\", {  userId: me_user })\r\n        .then(res => {\r\n            if (res.data && res.data.friends) {\r\n                setFriendList(res.data.friends) } })\r\n        .catch((error) => {\r\n            if (error.response && error.response.status === 401) {\r\n                alert(\"Utente non trovato\"); } \r\n              else {\r\n                console.error(error);} })\r\n                 }, [])\r\n\r\n                 const handleFriendSelection = (friend) => {\r\n                    setSelectedFriend(friend);\r\n                  }\r\n\r\n\r\nreturn (\r\n\r\n    <div>\r\n    <h2>In questa pagina puoi visualizzare i tuoi amici</h2>\r\n    {friendList?.length === 0 ? (\r\n      <> <p> Non sono presenti amici nella lista</p>\r\n      <p> Se vuoi aggiungerli </p> \r\n      <a href='http://localhost:3001/addFriend'>\r\n            <button> Aggiungi amico </button>\r\n        </a> </>\r\n    ) : (\r\n        <>\r\n        <ul className=\"friend-list\">\r\n        {friendList.map((friend) => (\r\n          <li className=\"friend-list-item\" key={friend._id} onClick={() => handleFriendSelection(friend)}>{friend.username}</li>\r\n        ))}\r\n      </ul>\r\n    {selectedFriend && (\r\n            <Chat\r\n              rightChat={/* Passa la chat corretta in base all'amico selezionato }\r\n              otherUser={selectedFriend.username}\r\n              loggedUser={loggedUser}/>\r\n          )} </>\r\n      )}\r\n    <p> Per ritornare alla <a href=\"http://localhost:3001/homepage\"> Homepage </a> </p> \r\n  </div>\r\n\r\n    )\r\n    \r\n}*/\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport ChatButton from \"../components/ChatButton\";\nimport Chat from \"../components/Chat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ChatsPage() {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [chats, setChats] = useState([]);\n  const [showChatRoom, setShowChatRoom] = useState(false);\n  const [rightChat, setRightChat] = useState({});\n  const [otherUser, setOtherUser] = useState(\"\");\n  const loggedUser = JSON.parse(localStorage.getItem(\"user\"));\n  useEffect(() => {\n    axios.get(`http://localhost:3000/api/users/showChat/${loggedUser._id}`).then(res => {\n      if (res.status === 200) {\n        return res.data;\n      } else {\n        throw new Error(\"Errore di comunicazione col server nell'ottenimento delle chat\");\n      }\n    }).then(dati => {\n      setLoading(false);\n      setChats(dati);\n    }).catch(e => {\n      setError(true);\n      setLoading(false);\n      console.log(e);\n    });\n  }, []);\n  const friendList = loggedUser.friends || [];\n  const friendChats = chats.filter(chat => {\n    const otherUserId = chat.utente1 === loggedUser._id ? chat.utente2 : chat.utente1;\n    return friendList.includes(otherUserId);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Caricamento in corso...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Errore!!! Impossibile visualizzare le chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: friendChats.map(chat => {\n          let user;\n          loggedUser._id === chat.utente1 ? user = chat.utente2 : user = chat.utente1;\n          return /*#__PURE__*/_jsxDEV(ChatButton, {\n            user: user,\n            showChatRoom: showChatRoom,\n            setShowChatRoom: setShowChatRoom,\n            chat: chat,\n            setRightChat: setRightChat,\n            setOtherUser: setOtherUser\n          }, chat._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: showChatRoom && /*#__PURE__*/_jsxDEV(Chat, {\n        rightChat: rightChat,\n        otherUser: otherUser,\n        loggedUser: loggedUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Per ritornare alla \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"http://localhost:3001/homepage\",\n        children: \"Homepage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(ChatsPage, \"TOFWb+2RKl20kyKYgC27mBR40nw=\");\n_c = ChatsPage;\nvar _c;\n$RefreshReg$(_c, \"ChatsPage\");","map":{"version":3,"names":["React","useEffect","useState","axios","ChatButton","Chat","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatsPage","_s","loading","setLoading","error","setError","chats","setChats","showChatRoom","setShowChatRoom","rightChat","setRightChat","otherUser","setOtherUser","loggedUser","JSON","parse","localStorage","getItem","get","_id","then","res","status","data","Error","dati","catch","e","console","log","friendList","friends","friendChats","filter","chat","otherUserId","utente1","utente2","includes","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","user","href","_c","$RefreshReg$"],"sources":["C:/Users/ross2/Desktop/Fondamenti-web-app/frontend/src/pages/ChatsPageFriends.jsx"],"sourcesContent":["/*import React, {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport ChatButton from \"../components/ChatButton\";\r\nimport Chat from \"../components/Chat\";\r\n\r\nexport default function ChatsPageFriends() {\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState(false)\r\n    const [chats, setChats] = useState([])\r\n    const [showChatRoom, setShowChatRoom] = useState(false)\r\n    const [otherUser, setOtherUser]=useState(``)\r\n    const [rightChat, setRightChat] = useState({})\r\n    const loggedUser = JSON.parse(localStorage.getItem(\"user\"))\r\n    console.log(loggedUser)\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(`http://localhost:3000/api/users/showChat/` + `${loggedUser._id}`)\r\n            .then((res) => {\r\n                if (res.status === 200) {\r\n                    return res.data\r\n                } else {\r\n                    throw new Error(\"Errore di comunicazione col server nell'ottenimento delle chat\")\r\n                }\r\n            })\r\n            .then((dati) => {\r\n                setLoading(false);\r\n                setChats(dati)\r\n            })\r\n            .catch((e) => {\r\n                setError(true);\r\n                setLoading(false);\r\n                console.log(e)\r\n            })\r\n    }, [])\r\n\r\n    \r\n    console.log(loggedUser)\r\n    console.log(loggedUser.friends.length)\r\n\r\n    //filtro le chat, controllo se l'utente Ã¨ presente nella lista di amici con some e prendo il suo id\r\n    const friendChats = chats.filter((chat) => {\r\n        const friendID = chat.utente1 === loggedUser._id ? chat.utente2 : chat.utente1\r\n        const isFriend = loggedUser.friends.some(\r\n            (friend) => friend._id == friendID)\r\n        return isFriend\r\n      })\r\n\r\n      console.log(friendChats.length)\r\n      console.log(friendChats)\r\n     \r\n\r\n\r\n    return (<>\r\n        <div>\r\n        {!friendChats.length ? \r\n        ( <p>Non hai ancora chat con gli amici</p> ) : ( <p>Visualizzazione solo delle chat con gli amici</p> )}\r\n\r\n            {loading ? <p>Caricamento in corso...</p> : error ? <p>Errore!!!Impossibile visualizzare le chat</p> : (\r\n                <div className=\"sidebar\">\r\n                    {friendChats.map((chat) => {\r\n                        let user;\r\n                        {\r\n                            loggedUser._id === chat.utente1 ? user = chat.utente2 : user = chat.utente1\r\n                        }\r\n                        return <ChatButton key={chat._id} user={user} showChatRoom={showChatRoom}\r\n                                           setShowChatRoom={setShowChatRoom} chat={chat}\r\n                                           setRightChat={setRightChat}\r\n                                           setOtherUser={setOtherUser}\r\n\r\n                        ></ChatButton>\r\n                    })}\r\n                </div>)}\r\n        </div>\r\n        <div className=\"main-content\">\r\n            {showChatRoom && (<Chat rightChat={rightChat} otherUser={otherUser} loggedUser={loggedUser}></Chat>)}\r\n        </div>\r\n        <p> Per ritornare alla <a href=\"http://localhost:3001/homepage\"> Homepage </a> </p> \r\n\r\n    </>)\r\n\r\n}\r\n*/\r\n/*import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Chat from \"../components/Chat\";\r\nimport '../style/style_viewfriends.css'\r\n\r\n\r\nexport default function ChatsPageFriends() {\r\n    const [friendList, setFriendList] = useState([])\r\n    const [selectedFriend, setSelectedFriend] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const user = JSON.parse(localStorage.getItem('user'))\r\n        const me_user = user._id\r\n\r\n        axios.post(\"http://localhost:3000/api/users/viewFriends\", {  userId: me_user })\r\n        .then(res => {\r\n            if (res.data && res.data.friends) {\r\n                setFriendList(res.data.friends) } })\r\n        .catch((error) => {\r\n            if (error.response && error.response.status === 401) {\r\n                alert(\"Utente non trovato\"); } \r\n              else {\r\n                console.error(error);} })\r\n                 }, [])\r\n\r\n                 const handleFriendSelection = (friend) => {\r\n                    setSelectedFriend(friend);\r\n                  }\r\n\r\n\r\nreturn (\r\n\r\n    <div>\r\n    <h2>In questa pagina puoi visualizzare i tuoi amici</h2>\r\n    {friendList?.length === 0 ? (\r\n      <> <p> Non sono presenti amici nella lista</p>\r\n      <p> Se vuoi aggiungerli </p> \r\n      <a href='http://localhost:3001/addFriend'>\r\n            <button> Aggiungi amico </button>\r\n        </a> </>\r\n    ) : (\r\n        <>\r\n        <ul className=\"friend-list\">\r\n        {friendList.map((friend) => (\r\n          <li className=\"friend-list-item\" key={friend._id} onClick={() => handleFriendSelection(friend)}>{friend.username}</li>\r\n        ))}\r\n      </ul>\r\n    {selectedFriend && (\r\n            <Chat\r\n              rightChat={/* Passa la chat corretta in base all'amico selezionato }\r\n              otherUser={selectedFriend.username}\r\n              loggedUser={loggedUser}/>\r\n          )} </>\r\n      )}\r\n    <p> Per ritornare alla <a href=\"http://localhost:3001/homepage\"> Homepage </a> </p> \r\n  </div>\r\n\r\n    )\r\n    \r\n}*/\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport ChatButton from \"../components/ChatButton\";\r\nimport Chat from \"../components/Chat\";\r\n\r\nexport default function ChatsPage() {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n  const [chats, setChats] = useState([]);\r\n  const [showChatRoom, setShowChatRoom] = useState(false);\r\n  const [rightChat, setRightChat] = useState({});\r\n  const [otherUser, setOtherUser] = useState(\"\");\r\n  const loggedUser = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`http://localhost:3000/api/users/showChat/${loggedUser._id}`)\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          return res.data;\r\n        } else {\r\n          throw new Error(\"Errore di comunicazione col server nell'ottenimento delle chat\");\r\n        }\r\n      })\r\n      .then((dati) => {\r\n        setLoading(false);\r\n        setChats(dati);\r\n      })\r\n      .catch((e) => {\r\n        setError(true);\r\n        setLoading(false);\r\n        console.log(e);\r\n      });\r\n  }, []);\r\n\r\n  const friendList = loggedUser.friends || [];\r\n\r\n  const friendChats = chats.filter((chat) => {\r\n    const otherUserId = chat.utente1 === loggedUser._id ? chat.utente2 : chat.utente1;\r\n    return friendList.includes(otherUserId);\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        {loading ? (\r\n          <p>Caricamento in corso...</p>\r\n        ) : error ? (\r\n          <p>Errore!!! Impossibile visualizzare le chat</p>\r\n        ) : (\r\n          <div className=\"sidebar\">\r\n            {friendChats.map((chat) => {\r\n              let user;\r\n              loggedUser._id === chat.utente1 ? (user = chat.utente2) : (user = chat.utente1);\r\n              return (\r\n                <ChatButton\r\n                  key={chat._id}\r\n                  user={user}\r\n                  showChatRoom={showChatRoom}\r\n                  setShowChatRoom={setShowChatRoom}\r\n                  chat={chat}\r\n                  setRightChat={setRightChat}\r\n                  setOtherUser={setOtherUser}\r\n                ></ChatButton>\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"main-content\">\r\n        {showChatRoom && (\r\n          <Chat rightChat={rightChat} otherUser={otherUser} loggedUser={loggedUser}></Chat>\r\n        )}\r\n      </div>\r\n      <p>\r\n        Per ritornare alla <a href=\"http://localhost:3001/homepage\">Homepage</a>\r\n      </p>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}