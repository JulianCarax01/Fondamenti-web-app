{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ross2\\\\Desktop\\\\Fondamenti-web-app\\\\frontend\\\\src\\\\pages\\\\ChatsPageFriends.jsx\",\n  _s = $RefreshSig$();\n/*import React, {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport ChatButton from \"../components/ChatButton\";\r\nimport Chat from \"../components/Chat\";\r\n\r\nexport default function ChatsPageFriends() {\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState(false)\r\n    const [chats, setChats] = useState([])\r\n    const [showChatRoom, setShowChatRoom] = useState(false)\r\n    const [otherUser, setOtherUser]=useState(``)\r\n    const [rightChat, setRightChat] = useState({})\r\n    const loggedUser = JSON.parse(localStorage.getItem(\"user\"))\r\n    console.log(loggedUser)\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(`http://localhost:3000/api/users/showChat/` + `${loggedUser._id}`)\r\n            .then((res) => {\r\n                if (res.status === 200) {\r\n                    return res.data\r\n                } else {\r\n                    throw new Error(\"Errore di comunicazione col server nell'ottenimento delle chat\")\r\n                }\r\n            })\r\n            .then((dati) => {\r\n                setLoading(false);\r\n                setChats(dati)\r\n            })\r\n            .catch((e) => {\r\n                setError(true);\r\n                setLoading(false);\r\n                console.log(e)\r\n            })\r\n    }, [])\r\n\r\n    \r\n    console.log(loggedUser)\r\n    console.log(loggedUser.friends.length)\r\n\r\n    //filtro le chat, controllo se l'utente è presente nella lista di amici con some e prendo il suo id\r\n    const friendChats = chats.filter((chat) => {\r\n        const friendID = chat.utente1 === loggedUser._id ? chat.utente2 : chat.utente1\r\n        const isFriend = loggedUser.friends.some(\r\n            (friend) => friend._id == friendID)\r\n        return isFriend\r\n      })\r\n\r\n      console.log(friendChats.length)\r\n      console.log(friendChats)\r\n     \r\n\r\n\r\n    return (<>\r\n        <div>\r\n        {!friendChats.length ? \r\n        ( <p>Non hai ancora chat con gli amici</p> ) : ( <p>Visualizzazione solo delle chat con gli amici</p> )}\r\n\r\n            {loading ? <p>Caricamento in corso...</p> : error ? <p>Errore!!!Impossibile visualizzare le chat</p> : (\r\n                <div className=\"sidebar\">\r\n                    {friendChats.map((chat) => {\r\n                        let user;\r\n                        {\r\n                            loggedUser._id === chat.utente1 ? user = chat.utente2 : user = chat.utente1\r\n                        }\r\n                        return <ChatButton key={chat._id} user={user} showChatRoom={showChatRoom}\r\n                                           setShowChatRoom={setShowChatRoom} chat={chat}\r\n                                           setRightChat={setRightChat}\r\n                                           setOtherUser={setOtherUser}\r\n\r\n                        ></ChatButton>\r\n                    })}\r\n                </div>)}\r\n        </div>\r\n        <div className=\"main-content\">\r\n            {showChatRoom && (<Chat rightChat={rightChat} otherUser={otherUser} loggedUser={loggedUser}></Chat>)}\r\n        </div>\r\n        <p> Per ritornare alla <a href=\"http://localhost:3001/homepage\"> Homepage </a> </p> \r\n\r\n    </>)\r\n\r\n}\r\n*/\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport '../style/style_viewfriends.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ChatsPageFriends() {\n  _s();\n  const [friendList, setFriendList] = useState([]);\n  const [selectedFriend, setSelectedFriend] = useState(null);\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem('user'));\n    const me_user = user._id;\n    axios.post(\"http://localhost:3000/api/users/viewFriends\", {\n      userId: me_user\n    }).then(res => {\n      if (res.data && res.data.friends) {\n        setFriendList(res.data.friends);\n      }\n    }).catch(error => {\n      if (error.response && error.response.status === 401) {\n        alert(\"Utente non trovato\");\n      } else {\n        console.error(error);\n      }\n    });\n  }, []);\n  const handleFriendSelection = friend => {\n    setSelectedFriend(friend);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"In questa pagina puoi visualizzare i tuoi amici\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }, this), (friendList === null || friendList === void 0 ? void 0 : friendList.length) === 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Non sono presenti amici nella lista\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Se vuoi aggiungerli \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"http://localhost:3001/addFriend\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \" Aggiungi amico \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }, this), \" \"]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"friend-list\",\n      children: friendList.map(friend => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"friend-list-item\",\n        onClick: () => handleFriendSelection(friend),\n        children: friend.username\n      }, friend._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), \"/*\", selectedFriend && /*#__PURE__*/_jsxDEV(ChatComponent, {\n      friend: selectedFriend\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this), \"*/\", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" Per ritornare alla \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"http://localhost:3001/homepage\",\n        children: \" Homepage \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 28\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatsPageFriends, \"lJZd8WdRAW/0eqyvHrWKKf3Fef4=\");\n_c = ChatsPageFriends;\nvar _c;\n$RefreshReg$(_c, \"ChatsPageFriends\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatsPageFriends","_s","friendList","setFriendList","selectedFriend","setSelectedFriend","user","JSON","parse","localStorage","getItem","me_user","_id","post","userId","then","res","data","friends","catch","error","response","status","alert","console","handleFriendSelection","friend","children","fileName","_jsxFileName","lineNumber","columnNumber","length","href","className","map","onClick","username","ChatComponent","_c","$RefreshReg$"],"sources":["C:/Users/ross2/Desktop/Fondamenti-web-app/frontend/src/pages/ChatsPageFriends.jsx"],"sourcesContent":["/*import React, {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport ChatButton from \"../components/ChatButton\";\r\nimport Chat from \"../components/Chat\";\r\n\r\nexport default function ChatsPageFriends() {\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState(false)\r\n    const [chats, setChats] = useState([])\r\n    const [showChatRoom, setShowChatRoom] = useState(false)\r\n    const [otherUser, setOtherUser]=useState(``)\r\n    const [rightChat, setRightChat] = useState({})\r\n    const loggedUser = JSON.parse(localStorage.getItem(\"user\"))\r\n    console.log(loggedUser)\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(`http://localhost:3000/api/users/showChat/` + `${loggedUser._id}`)\r\n            .then((res) => {\r\n                if (res.status === 200) {\r\n                    return res.data\r\n                } else {\r\n                    throw new Error(\"Errore di comunicazione col server nell'ottenimento delle chat\")\r\n                }\r\n            })\r\n            .then((dati) => {\r\n                setLoading(false);\r\n                setChats(dati)\r\n            })\r\n            .catch((e) => {\r\n                setError(true);\r\n                setLoading(false);\r\n                console.log(e)\r\n            })\r\n    }, [])\r\n\r\n    \r\n    console.log(loggedUser)\r\n    console.log(loggedUser.friends.length)\r\n\r\n    //filtro le chat, controllo se l'utente è presente nella lista di amici con some e prendo il suo id\r\n    const friendChats = chats.filter((chat) => {\r\n        const friendID = chat.utente1 === loggedUser._id ? chat.utente2 : chat.utente1\r\n        const isFriend = loggedUser.friends.some(\r\n            (friend) => friend._id == friendID)\r\n        return isFriend\r\n      })\r\n\r\n      console.log(friendChats.length)\r\n      console.log(friendChats)\r\n     \r\n\r\n\r\n    return (<>\r\n        <div>\r\n        {!friendChats.length ? \r\n        ( <p>Non hai ancora chat con gli amici</p> ) : ( <p>Visualizzazione solo delle chat con gli amici</p> )}\r\n\r\n            {loading ? <p>Caricamento in corso...</p> : error ? <p>Errore!!!Impossibile visualizzare le chat</p> : (\r\n                <div className=\"sidebar\">\r\n                    {friendChats.map((chat) => {\r\n                        let user;\r\n                        {\r\n                            loggedUser._id === chat.utente1 ? user = chat.utente2 : user = chat.utente1\r\n                        }\r\n                        return <ChatButton key={chat._id} user={user} showChatRoom={showChatRoom}\r\n                                           setShowChatRoom={setShowChatRoom} chat={chat}\r\n                                           setRightChat={setRightChat}\r\n                                           setOtherUser={setOtherUser}\r\n\r\n                        ></ChatButton>\r\n                    })}\r\n                </div>)}\r\n        </div>\r\n        <div className=\"main-content\">\r\n            {showChatRoom && (<Chat rightChat={rightChat} otherUser={otherUser} loggedUser={loggedUser}></Chat>)}\r\n        </div>\r\n        <p> Per ritornare alla <a href=\"http://localhost:3001/homepage\"> Homepage </a> </p> \r\n\r\n    </>)\r\n\r\n}\r\n*/\r\nimport React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport '../style/style_viewfriends.css'\r\n\r\n\r\nexport default function ChatsPageFriends() {\r\n    const [friendList, setFriendList] = useState([])\r\n    const [selectedFriend, setSelectedFriend] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const user = JSON.parse(localStorage.getItem('user'))\r\n        const me_user = user._id\r\n\r\n        axios.post(\"http://localhost:3000/api/users/viewFriends\", {  userId: me_user })\r\n        .then(res => {\r\n            if (res.data && res.data.friends) {\r\n                setFriendList(res.data.friends) } })\r\n        .catch((error) => {\r\n            if (error.response && error.response.status === 401) {\r\n                alert(\"Utente non trovato\"); } \r\n              else {\r\n                console.error(error);} })\r\n                 }, [])\r\n\r\n                 const handleFriendSelection = (friend) => {\r\n                    setSelectedFriend(friend);\r\n                  }\r\n\r\n\r\nreturn (\r\n\r\n    <div>\r\n    <h2>In questa pagina puoi visualizzare i tuoi amici</h2>\r\n    {friendList?.length === 0 ? (\r\n      <> <p> Non sono presenti amici nella lista</p>\r\n      <p> Se vuoi aggiungerli </p> \r\n      <a href='http://localhost:3001/addFriend'>\r\n            <button> Aggiungi amico </button>\r\n        </a> </>\r\n    ) : (\r\n      <ul className=\"friend-list\">\r\n        {friendList.map((friend) => (\r\n          <li className=\"friend-list-item\" key={friend._id} onClick={() => handleFriendSelection(friend)}>{friend.username}</li>\r\n        ))}\r\n      </ul>\r\n    )}\r\n    \r\n    /*{selectedFriend && (\r\n        <ChatComponent friend={selectedFriend} />\r\n      )}*/\r\n    <p> Per ritornare alla <a href=\"http://localhost:3001/homepage\"> Homepage </a> </p> \r\n  </div>\r\n\r\n    )\r\n    \r\n}\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,gCAAgC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAGvC,eAAe,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EACvC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE1DC,SAAS,CAAC,MAAM;IACZ,MAAMY,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;IACrD,MAAMC,OAAO,GAAGL,IAAI,CAACM,GAAG;IAExBjB,KAAK,CAACkB,IAAI,CAAC,6CAA6C,EAAE;MAAGC,MAAM,EAAEH;IAAQ,CAAC,CAAC,CAC9EI,IAAI,CAACC,GAAG,IAAI;MACT,IAAIA,GAAG,CAACC,IAAI,IAAID,GAAG,CAACC,IAAI,CAACC,OAAO,EAAE;QAC9Bf,aAAa,CAACa,GAAG,CAACC,IAAI,CAACC,OAAO,CAAC;MAAC;IAAE,CAAC,CAAC,CAC3CC,KAAK,CAAEC,KAAK,IAAK;MACd,IAAIA,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QACjDC,KAAK,CAAC,oBAAoB,CAAC;MAAE,CAAC,MAC3B;QACHC,OAAO,CAACJ,KAAK,CAACA,KAAK,CAAC;MAAC;IAAE,CAAC,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,qBAAqB,GAAIC,MAAM,IAAK;IACvCrB,iBAAiB,CAACqB,MAAM,CAAC;EAC3B,CAAC;EAGnB,oBAEI7B,OAAA;IAAA8B,QAAA,gBACA9B,OAAA;MAAA8B,QAAA,EAAI;IAA+C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACvD,CAAA7B,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAE8B,MAAM,MAAK,CAAC,gBACvBnC,OAAA,CAAAE,SAAA;MAAA4B,QAAA,GAAE,GAAC,eAAA9B,OAAA;QAAA8B,QAAA,EAAG;MAAoC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC9ClC,OAAA;QAAA8B,QAAA,EAAG;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC5BlC,OAAA;QAAGoC,IAAI,EAAC,iCAAiC;QAAAN,QAAA,eACnC9B,OAAA;UAAA8B,QAAA,EAAQ;QAAgB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC,KAAC;IAAA,eAAE,CAAC,gBAEVlC,OAAA;MAAIqC,SAAS,EAAC,aAAa;MAAAP,QAAA,EACxBzB,UAAU,CAACiC,GAAG,CAAET,MAAM,iBACrB7B,OAAA;QAAIqC,SAAS,EAAC,kBAAkB;QAAkBE,OAAO,EAAEA,CAAA,KAAMX,qBAAqB,CAACC,MAAM,CAAE;QAAAC,QAAA,EAAED,MAAM,CAACW;MAAQ,GAA1EX,MAAM,CAACd,GAAG;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAqE,CACtH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACL,EAAC,IAEA,EAAC3B,cAAc,iBACbP,OAAA,CAACyC,aAAa;MAACZ,MAAM,EAAEtB;IAAe;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CACzC,EAAC,IACJ,eAAAlC,OAAA;MAAA8B,QAAA,GAAG,sBAAoB,eAAA9B,OAAA;QAAGoC,IAAI,EAAC,gCAAgC;QAAAN,QAAA,EAAC;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChF,CAAC;AAIR;AAAC9B,EAAA,CAlDuBD,gBAAgB;AAAAuC,EAAA,GAAhBvC,gBAAgB;AAAA,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}